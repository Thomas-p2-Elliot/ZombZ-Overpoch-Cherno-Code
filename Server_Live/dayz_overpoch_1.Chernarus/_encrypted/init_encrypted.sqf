P2DZ_decryptionDebug = true;private["_fr"];_fr = false;if (isNil 'P2DZ_loginCheck') then {	_fr = true;	P2DZ_loginCheck = true;	if (P2DZ_decryptionDebug) then { diag_log(format['%1: %2: %3',diag_tickTime,'init_encrypted','P2DZ_loginCheck set to true (was nil)']); };} else {	if (P2DZ_loginCheck) then {		_fr = false;	} else {		_fr = true;		P2DZ_loginCheck = true;		if (P2DZ_decryptionDebug) then { diag_log(format['%1: %2: %3',diag_tickTime,'init_encrypted','P2DZ_loginCheck set to true (was false)']); };	};};if (_fr) exitWith {	progressLoadingScreen 0.025;	((uiNameSpace getVariable "BIS_loadingScreen") displayctrl 102) ctrlSetText "ZombZ: Please Wait - Receiving Server Data...";	_this call compile ("		{			comment(""Encrytion System by Player2 - Free to Use if you Understand It. Msg me via www.ZombZ.net if you need an Encrypter."");			private[""_n"",""_d"",""_1"",""_2""];			_n = _this;			_1 = " + (_this select 0) + ";			_2 = " + (_this select 1) + ";			_d = 0;			{				_n = [_n,_2 select _d,_1 select _d] call { 					private[""_str"",""_old"",""_new"",""_out"",""_tmp"",""_jm"",""_la"",""_lo"",""_ln"",""_i""];					_str=_this select 0;					_arr=toArray(_str);					_la=count _arr;					_old=_this select 1;					_new=_this select 2;					_na=[_new] call {						private[""_in"",""_i"",""_arr"",""_out""];						_in=_this select 0;						_arr = toArray(_in);						_out=[];						for ""_i"" from 0 to (count _arr)-1 do {							_out=_out+[toString([_arr select _i])];						};						_out					};					_lo=[_old] call {	private[""_in"",""_arr"",""_len"",""_p2""];					_in=_this select 0; _p2 = nil;					_arr=[_in] call {	private[""_in"",""_i"",""_arr"",""_out""];					_in=_this select 0; 					_arr = toArray(_in);					_out=[];					for ""_i"" from 0 to (count _arr)-1 do {						_out=_out+[toString([_arr select _i])];					};					_out};					_len=count (_arr);					_len};					_ln=[_new] call {	private[""_in"",""_arr"",""_len""];					_in=_this select 0; comment""p2""; 					_arr=[_in] call {	private[""_in"",""_i"",""_arr"",""_out""]; 					_in=_this select 0; comment""p2""; 					_arr = toArray(_in);					_out=[];					for ""_i"" from 0 to (count _arr)-1 do {						_out=_out+[toString([_arr select _i])];					};					_out};					_len=count (_arr);					_len};					_out="""";					for ""_i"" from 0 to (count _arr)-1 do {						_tmp="""";						if (_i <= _la-_lo) then {							for ""_j"" from _i to (_i+_lo-1) do {								_tmp=_tmp + toString([_arr select _j]);							};						};						if (_tmp==_old) then {							_out=_out+_new;							_i=_i+_lo-1;						} else {							_out=_out+toString([_arr select _i]);						};					};					_out				};				_d = _d + 1;			} forEach _1;			_n = call compile _n;			_d = 0;			{				_n set [_d, _x " + (_this select 2) + "];				_d = _d + 1;			} forEach _n;			_n		} call compile preprocessFileLineNumbers ""_encrypted\init_encrypted.sqf"";"	);};progressLoadingScreen 0.033;P2DZ_postVarsDone_Thread1 = false;P2DZ_postVarsDone_Thread2 = false;_this spawn {	_this call compile preprocessFileLineNumbers "_encrypted\functionChecks.sqf"; if (P2DZ_decryptionDebug) then { diag_log(format["P2DecryptionDebug: Decrypted: %1","functionChecks"]); };	_this call compile preprocessFileLineNumbers "_encrypted\antihack_loopedExecution.sqf"; if (P2DZ_decryptionDebug) then { diag_log(format["P2DecryptionDebug: Decrypted: %1","antihack_loopedExecution"]); };	P2DZ_AHDecrypted = true;};waitUntil{uiSleep 0.1; P2DZ_postVars};diag_log("PostVars: Done");progressLoadingScreen 0.05;((uiNameSpace getVariable "BIS_loadingScreen") displayctrl 102) ctrlSetText "ZombZ: Please Wait - Reading Server Data...";_this spawn {	_this call compile preprocessFileLineNumbers "_encrypted\variables_modified.sqf"; if (P2DZ_decryptionDebug) then { diag_log(format["P2DecryptionDebug: Decrypted: %1","variables_modified"]); };	progressLoadingScreen 0.075;	_this call compile preprocessFileLineNumbers "_encrypted\fn_hintMsg.sqf";	if (P2DZ_decryptionDebug) then { diag_log(format["P2DecryptionDebug: Decrypted: %1","fn_hintMsg"]); };	progressLoadingScreen 0.1;	((uiNameSpace getVariable "BIS_loadingScreen") displayctrl 102) ctrlSetText "ZombZ: Please Wait - Compiling Server Data...";	P2DZ_postVarsDone_Thread1 = true;};_this spawn {	_this call compile preprocessFileLineNumbers "_encrypted\player_traderMenuConfigEncrypted.sqf"; if (P2DZ_decryptionDebug) then { diag_log(format["P2DecryptionDebug: Decrypted: %1","player_traderMenuConfigEncrypted"]); };	progressLoadingScreen 0.15;	((uiNameSpace getVariable "BIS_loadingScreen") displayctrl 102) ctrlSetText "ZombZ: Please Wait - Yelling at Bohemia Interactive...";	P2DZ_postVarsDone_Thread2 = true;};waitUntil{uiSleep 0.1; P2DZ_postVarsDone_Thread1};diag_log("P2DZ_postVarsDone_Thread1: Done");waitUntil{uiSleep 0.1; P2DZ_postVarsDone_Thread2};diag_log("P2DZ_postVarsDone_Thread2: Done");progressLoadingScreen 0.175;((uiNameSpace getVariable "BIS_loadingScreen") displayctrl 102) ctrlSetText "ZombZ: Please Wait - Receiving Mission Data...";P2DZ_postVarsDone = true;waitUntil{uiSleep 0.1; P2DZ_postCompiles};diag_log("P2DZ_postCompiles: Done");waitUntil{uiSleep 0.1; P2DZ_AHDecrypted};diag_log("P2DZ_AHDecrypted: Done");_this call compile preprocessFileLineNumbers "_encrypted\antihack.sqf";	if (P2DZ_decryptionDebug) then { diag_log(format["P2DecryptionDebug: Decrypted: %1","antihack"]); };P2DZ_postCompilesDone = true;